 add_book.addEventListener("click", () => {
     console.log("siuu")
    
     alert("sup");
 });


 const showButton = document.getElementById("showDialog");
 const overLay = document.getElementById("overLay");
 const outputBox = document.querySelector("output");
 const selectEl = favDialog.querySelector("select");
 const confirmBtn = favDialog.querySelector("#confirmBtn");

  "Show the dialog" button opens the <dialog> modally
 add_book.addEventListener("click", () => {
   favDialog.showModal();
 });

  "Favorite animal" input sets the value of the submit button
 selectEl.addEventListener("change", (e) => {
   confirmBtn.value = selectEl.value;
 });

  "Cancel" button closes the dialog without submitting because of [formmethod="dialog"], triggering a close event.
 favDialog.addEventListener("close", (e) => {
   outputBox.value =
     favDialog.returnValue === "default"
       ? "No return value."
       : `ReturnValue: ${favDialog.returnValue}.`; // Have to check for "default" rather than empty string
 });

  Prevent the "confirm" button from the default behavior of submitting the form, and close the dialog with the `close()` method, which triggers the "close" event.
 confirmBtn.addEventListener("click", (event) => {
   event.preventDefault(); // We don't want to submit this fake form
   favDialog.close(selectEl.value);  Have to send the select box value here.
 })